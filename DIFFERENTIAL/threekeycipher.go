package main

import(
	"fmt"
//	"math/rand"
)

var sbox0 = [256]byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

// creates tupples of (pt1, pt2, ct1, ct2) where pt1[pos] ^ pt2[pos] = delta
type tuple struct {
	pt1 byte
	pt2 byte
	ct1 byte
	ct2 byte
}

// key: key to encrypt with AES
// positions: list of positions for active differences
// deltas: list of differences respective to their positions
// max: maximum tuples you want to get
func setup(key uint16, delta byte, max int) []tuple {

	var tuples []tuple
//	r := rand.New(rand.NewSource(99)) // TODO: replace with time?

	for number := 0 ; number < max; number++ {

		// create a random tuple and add it to the tuple list
		var tup tuple
		tup.pt1 = byte(number)
		tup.pt2 = tup.pt1 ^ delta

		// encrypt the plaintexts
		tup.ct1 = simple_cipher3(key, tup.pt1)
		tup.ct2 = simple_cipher3(key, tup.pt2)
		
		// add the tup to the list
		tuples = append(tuples, tup)
	}

	//
	return tuples
}

func display_diff_char() map[uint16]int {

	// the map input->output: number of possibilities
	delta := make(map[uint16]int, 256 * 256)

	// fill the map
	var uno, duo uint16
	for uno = 0; uno < 256; uno++ {
		for duo = 0; duo < 256; duo++ {
			input_diff := uno ^ duo
			output_diff := uint16(sbox0[uno] ^ sbox0[duo])
			delta[(input_diff << 8) ^ output_diff] ++
		}
	}

	return delta
}

func display_good_differentials(delta map[uint16]int) {

	found := 0
	for idx := 0; idx < 256 * 256; idx ++ {
		if d := delta[uint16(idx)]; d > 2 {
			found++
			d_in := idx >> 8
			d_out := idx & 0xFF
			fmt.Printf("#%d - input delta: %02x, output delta: %02x, number: %d\n", found, d_in, d_out, d)
		}
	}

}

func simple_cipher3(key [3]byte, plaintext byte) byte {
	ciphertext := key[0] ^ plaintext
	ciphertext = sbox0[ciphertext]
	ciphertext = key[1] ^ ciphertext
	ciphertext = sbox0[ciphertext]
	ciphertext = key[2] ^ ciphertext
	return ciphertext
}

func verify_delta(uno byte, duo byte, delta byte) bool {
	if uno ^ duo == delta{
		return true
	} else {
		return false
	}
}

func main(){
//	display_good_differentials(display_diff_char())

	key := []byte{0x91, 0xc3, 0xd0}

	tuples := setup(key, 1, 256)

//	guessed_key := 0xc3
	expected_delta := byte(0x1f)
	counter := 0
	for _, tuple := range tuples {
		if c := tuple.ct1 ^ tuple.ct2; c == expected_delta {
			counter ++
		} 
	}

	fmt.Println("should print 4:\n", counter)

}

